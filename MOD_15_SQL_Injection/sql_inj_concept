###########################################################################
###########################################################################
#####  ____   ___  _       ___        _           _   _               #####
##    / ___| / _ \| |     |_ _|_ __  (_) ___  ___| |_(_) ___  _ __       ##
##    \___ \| | | | |      | || '_ \ | |/ _ \/ __| __| |/ _ \| '_ \      ##
##     ___) | |_| | |___   | || | | || |  __/ (__| |_| | (_) | | | |     ##
##    |____/ \__\_\_____| |___|_| |_|/ |\___|\___|\__|_|\___/|_| |_|     ##
##                               |__/                                    ##
#####																  #####	
###########################################################################
###########################################################################

      -------------------------------------------------------------
      ##### CEHv12 | 2023m. | Syllabus for exam prep. by P.S. #####
      -------------------------------------------------------------

SQL injection is a technique used to take advantage of unsanitized input vulnerabilities to pass SQL commands through a web application for execution by a backend database. 
App uses SQL statements to authenticate users to the app, validate roles and access levels, store and obtain information for the app and user, and link to other data sources. 
SQL injection attacks work because the application does not properly validate an input before passing it to an SQL statement.



*** Understanding HTTP POST Request ***
----------------------------------------

HTTP POST request is a method for carrying requested data to server. Unlike the HTTP GET method, the HTTP POST request carries the requested data as a part of the message body. 
Ideal for communicating with an XML web service, these methods submit and retrieve data from the web server. When a user provides information and clicks Submit, string is visible in the body of the HTTP or HTTPS POST request as:
~~~ select * from Users where (username = 'smith' and password = 'simpson');


*** Understanding an SQL Injection Query—Code Analysis ***
----------------------------------------------------------

Code analysis or code review is the most effective technique for identifying vulnerabilities or flaws in the code. 
Attacker exploits the vulnerabilities found in the code to gain access to the database. Attacker logs into an account by the following process: 

1. A user enters a username and password that match a record in the user’s table 
2. A dynamically generated SQL query is used to retrieve the number of matching rows 
3. The user is then authenticated and redirected to the requested page 
4. When the attacker enters blah' or 1=1 --, then the SQL query will look like: SELECT Count(*) FROM Users WHERE UserName='blah' Or 1=1 --' AND Password=''
5. A pair of hyphens indicate the beginning of a comment in SQL; therefore, the query simply becomes
SELECT Count(*) FROM Users WHERE UserName='blah' Or 1=1 string strQry = "SELECT Count(*) FROM Users WHERE UserName='" + txtUser.Text + "' AND Password='" + txtPassword.Text + "'";


Page shown in the figure(foto_nr_00.jpg) is a hacker’s paradise because it allows hacker to hijack it and obtain confidential information, change data in the database, damage the database records, and even create new database user accounts. Most SQL-compliant databases, including SQL Server, store metadata in a series of system tables with names sysobjects, syscolumns, sysindexes, and so on. Thus, a hacker could use the system tables to acquire database schema information to further compromise the database. For example, the following text entered into the txtFilter textbox may reveal the names of the user tables in the database:

UNION SELECT id, name, '', 0 FROM sysobjects WHERE xtype ='U' 
--In particular, the UNION statement is useful for a hacker because it splices the results of one query into another. In this case, the hacker has spliced the names of the Users table in the database into the original query of the Products table. The only trick is to match the number and data types of the columns with the original query. The previous query might reveal that a table named Users exists in the database. A second query could reveal the columns in the Users table. Using this information, the hacker might enter the following into the txtFilter textbox: 

UNION SELECT 0, UserName, Password, 0 FROM Users 
--Entering this query reveals the usernames and passwords found in the Users table.
The page (BadProductList.aspx) displays products from the Northwind database and allows users to filter the resulting list of products using a textbox called txtFilter. As with the previous example (BadLogin.aspx), this code is vulnerable to SQL injection attacks. The executed SQL query is constructed dynamically from a user-supplied input.


SQL Query Executed (foto_nr_01.jpg)
SELECT ProductId, ProductName, QuantityPerUnit, UnitPrice FROM Products WHERE ProductName LIKE 'blah' UNION Select 0, username, password, 0 from users --

*** Example of a Web Application Vulnerable to SQL Injection *** (foto_nr_02.jpg)
----------------------------------------------------------------------------------

Attack Analysis Most websites provide search to enable users to find a specific product or service quickly. 
A separate Search field is maintained on the website in an area that is easily viewable. As with any other input field, attackers target this field to perform SQL injection attacks. 
An attacker enters specific input values in the Search field to perform an SQL injection attack.




